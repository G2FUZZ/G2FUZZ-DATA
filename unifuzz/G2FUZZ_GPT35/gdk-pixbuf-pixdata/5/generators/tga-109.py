import struct

def create_tga_file(filename, width, height, data, color_map=None, image_id="Generated by AI Assistant"):
    header = bytearray([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, width % 256, width // 256, height % 256, height // 256, 24, 32])
    
    if color_map:
        color_map_length = len(color_map) * 3
        header[1] = 9  # Color-mapped image type
        header.extend([0, 0, color_map_length % 256, color_map_length // 256, 24, 0])
    
    if image_id:
        image_id_bytes = image_id.encode()
        header.extend(image_id_bytes)
        header.extend(bytearray(1))  # Null terminator
    
    with open(filename, "wb") as f:
        f.write(header)
        
        if color_map:
            for color in color_map:
                f.write(bytes(color))
        
        for i in range(0, len(data), 3):
            f.write(bytes([data[i + 2], data[i + 1], data[i]]))

width = 200
height = 200
data = [255, 0, 0] * 10000  # Red image data

filename = "./tmp/complex_test.tga"
color_map = [[255, 0, 0], [0, 255, 0], [0, 0, 255]]  # Color map for color-mapped image
image_id = "Custom TGA Image"

create_tga_file(filename, width, height, data, color_map, image_id)

print(f"TGA file '{filename}' with color map and image ID has been created.")