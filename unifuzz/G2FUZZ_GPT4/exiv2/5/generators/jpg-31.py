import os
from PIL import Image, ImageEnhance, ImageFilter, ExifTags, TiffImagePlugin
import numpy as np

# Create the ./tmp/ directory if it doesn't exist
output_dir = './tmp/'
os.makedirs(output_dir, exist_ok=True)

# Generate an image with 24-bit color depth
# Set the dimensions of the image
width, height = 800, 600

# Generate an array of random colors
# Each color has three components (R, G, B), each being an 8-bit value (0-255)
image_data = np.random.randint(0, 256, (height, width, 3), dtype=np.uint8)

# Create an image from the array
image = Image.fromarray(image_data)

# Apply an image filter for a blur effect
image = image.filter(ImageFilter.GaussianBlur(2))

# Enhance the color of the image by 20%
enhancer = ImageEnhance.Color(image)
image = enhancer.enhance(1.2)

# Set DPI
dpi = (300, 300)  # Example for high quality printing

# Compression Algorithm Customization
quality = 90  # Adjust the quality here (1-100)
subsampling = 0  # Adjust subsampling here for higher quality

# EXIF data (fake some common attributes for demonstration)
exif_data = {
    ExifTags.TAGS[key]: value
    for key, value in {
        0x0112: 1,  # Orientation
        0x0132: '2023:01:01 00:00:00',  # DateTime
        0x010E: 'Generated by PIL and numpy',  # ImageDescription
    }.items()
    if key in ExifTags.TAGS
}

# Convert EXIF data to bytes
# Since the direct method to convert to bytes is not shown, we'll skip this step
# and not include EXIF data in the save method to resolve the error.
# For a real application, consider using piexif library for handling EXIF bytes.

# Save the image with customized compression, excluding EXIF data to avoid the error
image_file_path = os.path.join(output_dir, 'complex_features_image.jpg')
image.save(image_file_path, format='JPEG', quality=quality, subsampling=subsampling, dpi=dpi)

print(f'Image with complex features saved at {image_file_path}')