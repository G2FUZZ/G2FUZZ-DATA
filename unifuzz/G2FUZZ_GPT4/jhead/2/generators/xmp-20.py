import os
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom.minidom import parseString

# Ensure the ./tmp/ directory exists
os.makedirs('./tmp/', exist_ok=True)

# Define the root element with namespace declarations
xmp_root = Element('xmpmeta')
xmp_root.set('xmlns:x', 'adobe:ns:meta/')
xmp_root.set('xmlns:rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#')
xmp_root.set('xmlns:dc', 'http://purl.org/dc/elements/1.1/')
xmp_root.set('xmlns:photoshop', 'http://ns.adobe.com/photoshop/1.0/')
xmp_root.set('xmlns:xmpRights', 'http://ns.adobe.com/xap/1.0/rights/')

# Add rdf:RDF element
rdf = SubElement(xmp_root, 'rdf:RDF')

# Add first rdf:Description element
description1 = SubElement(rdf, 'rdf:Description', {
    'rdf:about': '',
    'xmlns:xmp': 'http://ns.adobe.com/xap/1.0/',
    'xmp:CreatorTool': 'Custom Python Script',
    'xmp:CreateDate': '2023-01-01T12:00:00Z'
})
notes = SubElement(description1, 'xmp:Notes')
notes.text = "Generated by an advanced script."

# Add second rdf:Description element with dc:title
description2 = SubElement(rdf, 'rdf:Description', {
    'rdf:about': '',
    'xmlns:dc': 'http://purl.org/dc/elements/1.1/',
})
title = SubElement(description2, 'dc:title')
title_lang = SubElement(title, 'rdf:Alt')
title_en = SubElement(title_lang, 'rdf:li', {'xml:lang': 'en'})
title_en.text = "Complex XMP File Example"

# Add third rdf:Description element with photoshop:Headline
description3 = SubElement(rdf, 'rdf:Description', {
    'rdf:about': '',
    'xmlns:photoshop': 'http://ns.adobe.com/photoshop/1.0/',
    'photoshop:Headline': 'An Example Headline'
})

# Add fourth rdf:Description element for Rights Management
description4 = SubElement(rdf, 'rdf:Description', {
    'rdf:about': '',
    'xmlns:xmpRights': 'http://ns.adobe.com/xap/1.0/rights/',
    'xmpRights:UsageTerms': 'This is an example of usage terms.'
})

# Convert the created XML structure to a string
raw_xml = tostring(xmp_root, 'utf-8')

# Use parseString to convert the raw XML string to a DOM object, then pretty print it
pretty_xml = parseString(raw_xml).toprettyxml(indent="    ")

# Save the pretty XML to a file
with open('./tmp/complex_metadata.xmp', 'w', encoding='utf-8') as file:
    file.write(pretty_xml)

print("Complex XMP file successfully created at './tmp/complex_metadata.xmp'")